---
description: 
globs: 
alwaysApply: true
---

# Your rule content

## 1. 项目目标与愿景 (Project Goal & Vision)

开发一个高效、美观、易用的文本片段管理工具。核心功能是让用户能够快速存储、组织和检索常用的文本片段，并通过快捷方式插入到当前活动窗口。同时，集成可选的增强脚本，提供更丰富的桌面操作体验。最终目标是将其打包成一个独立的、用户友好的 Windows 应用程序。

## 2. 核心技术栈 (Core Technologies)

*   **核心逻辑与后台:** AutoHotkey v2 (推荐使用 v2 以获得更好的结构和现代特性)
*   **前端 UI (唤出页面 & 管理面板):**
    *   **推荐方案:** AHK + Web UI (HTML, CSS, JavaScript) via WebView2 (例如使用 `AHK-WebView2` 库或类似方案)。这能最好地实现“优美的前端”要求，提供现代化的卡片布局、动画效果和灵活的样式。
    *   **备选方案:** 纯 AHK GUI v2。虽然可行，但实现复杂、美观的动态 UI (如卡片布局、平滑折叠/展开) 会比较困难且性能可能受限。
*   **数据存储:**
    *   **推荐方案:** JSON 文件。结构清晰，易于读写和解析，适合存储片段、分组结构和配置。
    *   **备选方案:** INI 文件 (对于简单配置尚可，但嵌套结构管理不便) 或 SQLite (如果数据量非常大或需要复杂查询，但可能增加依赖)。
*   **打包:** AutoHotkey Compiler (Ahk2Exe)

## 3. 架构设计 (Architecture Design)

*   **主进程 (AHK Backend):**
    *   负责监听全局快捷键（用于唤出 Snippet 选择页面）。
    *   作为系统托盘应用程序运行，提供退出和打开管理面板的选项。
    *   管理数据文件（JSON）的读取和写入（增删改查片段/分组/配置）。
    *   负责与前端 UI 进行通信（IPC，例如通过 WebView2 的 `PostWebMessage`/`ExecuteScript` 或 AHK 自定义消息）。
    *   根据配置加载/卸载/管理 `easy-window-dragging.ahk` 和 `on-screen-keyboard.ahk` 子脚本的运行状态。
    *   执行核心操作，如将选定的 Snippet 复制到剪贴板。
*   **前端 UI (Web Interface - HTML/CSS/JS in WebView2):**
    *   **Snippet 选择页面 (唤出页面):**
        *   接收来自 AHK 后端的数据，以卡片形式展示 Snippet 及其分组。
        *   实现分组的展开/折叠交互。
        *   实现 Snippet 的搜索/过滤功能 (可选增强)。
        *   响应用户的双击事件，通知 AHK 后端复制对应的 Snippet。
        *   UI 应设计为临时弹出窗口，失去焦点或选择后可自动关闭 (待定)。
    *   **管理面板页面:**
        *   提供完整的 CRUD (创建、读取、更新、删除) 操作界面，用于管理 Snippet 和分组 (支持拖拽排序、父子分组)。
        *   提供设置界面，用于配置应用的行为（如快捷键、主题等）。
        *   提供开关，用于启用/禁用集成的 `easy-window-dragging` 和 `on-screen-keyboard` 功能。
        *   所有操作通过与 AHK 后端的通信来持久化。
*   **数据层 (Data Layer):**
    *   `snippets.json` (或类似名称): 存储所有文本片段、分组结构、ID 等信息。
    *   `config.json` (或类似名称): 存储应用配置，如快捷键设置、窗口位置记忆、集成脚本的启用状态等。

## 4. 核心功能模块细化 (Core Feature Modules)

*   **4.1 热键监听与响应 (Hotkey Listener & Response):**
    *   使用 AHK `Hotkey` 命令注册全局热键。
    *   热键触发时，检查 Snippet 选择 UI 是否已存在，若无则创建并显示，若有则激活。
    *   需要考虑防止热键冲突或提供自定义配置。
*   **4.2 Snippet 选择 UI (Snippet Selector UI):**
    *   **布局:** 卡片式布局，每个 Snippet 是一个卡片。
    *   **分组:** 使用可折叠/展开的区域显示分组，支持多级嵌套。
    *   **交互:**
        *   双击卡片 -> 通知后端复制内容 -> (可选) 自动关闭 UI。
        *   单击分组标题 -> 展开/折叠。
        *   (可选) 搜索框实时过滤 Snippet。
        *   (可选) 鼠标悬停显示完整内容预览。
*   **4.3 管理面板 UI (Management Panel UI):**
    *   **Snippet 管理:**
        *   列表/树状视图展示所有 Snippet 和分组。
        *   提供添加、编辑、删除 Snippet 的表单或行内编辑功能。
        *   支持富文本编辑 (可选，取决于需求复杂度)。
    *   **分组管理:**
        *   添加、重命名、删除分组。
        *   通过拖拽调整 Snippet 和分组的顺序及层级关系。
    *   **设置:**
        *   快捷键配置入口。
        *   集成脚本 (`easy-window-dragging`, `on-screen-keyboard`) 的启用/禁用开关。
        *   (可选) 外观主题选择。
*   **4.4 数据持久化 (Data Persistence):**
    *   定义清晰的 JSON 结构来存储 Snippet (ID, content, groupID, creationDate, lastUsedDate 等) 和 Group (ID, name, parentID, collapsedState 等)。
    *   AHK 后端负责在启动时加载数据，在更改时安全地写入数据 (考虑备份或原子写入)。
*   **4.5 集成脚本管理 (Integrated Scripts Management):**
    *   AHK 主脚本需要能够根据 `config.json` 中的设置：
        *   使用 `#Include` 或其他方式按需加载目标 `.ahk` 文件。
        *   提供启动/停止这些脚本功能的内部命令或函数。
        *   确保这些脚本与主应用及 UI 的交互顺畅（如果需要）。
*   **4.6 后台运行与托盘图标 (Background Operation & Tray Icon):**
    *   脚本启动时不显示任何主窗口，仅创建托盘图标。
    *   托盘菜单提供 "打开管理面板" 和 "退出" 选项。
    *   关闭管理面板 UI 不应退出整个应用，应用应继续在后台运行监听热键。

## 5. 开发原则 (Development Principles)

*   **代码风格:** 遵循 AutoHotkey v2 的最佳实践和推荐风格。代码清晰、模块化，添加必要的注释。
*   **版本控制:** 使用 Git 进行版本控制。
*   **模块化:** 将不同的功能（如热键处理、数据管理、UI 通信、子脚本控制）尽可能分离到不同的函数或类中。
*   **用户体验:** 优先考虑简洁、直观、响应迅速的用户体验。
*   **健壮性:** 添加错误处理和日志记录（至少在开发阶段）。

## 6. 建议文件结构 (Suggested File Structure)

Text-Snippet-Manager/
├── Text-Snippet-Manager.ahk # 主启动脚本 (AHK Backend)
├── .cursor/
│ ├── rules/
│ │ └── manager-rule.mdc # 本文件
├── Readme-deepseek.md # 项目说明文件1
├── Readme-gemini.md # 项目说明文件1
├── src/ # AHK 源码目录
│ ├── data_manager.ahk # 数据读写模块
│ ├── hotkey_manager.ahk # 热键管理模块
│ ├── ui_handler.ahk # UI 交互处理模块
│ ├── script_integrator.ahk # 集成脚本管理模块
│ └── lib/ # AHK 库 (如 AHK-WebView2)
├── integrated_scripts/ # 外部集成的 AHK 脚本
│ ├── easy-window-dragging.ahk
│ └── on-screen-keyboard.ahk
├── ui/ # 前端 UI 文件 (HTML/CSS/JS for WebView2)
│ ├── index.html # 主 HTML (可能是管理面板)
│ ├── selector.html # Snippet 选择器页面 HTML
│ ├── css/
│ │ └── style.css
│ └── js/
│ ├── main.js # 管理面板 JS
│ └── selector.js # 选择器页面 JS
├── data/ # 用户数据存储目录 (程序运行时创建)
│ ├── snippets.json
│ └── config.json
└── build/ # 打包输出目录
